<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Change Password - Admin Portal</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI",
          Roboto, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
        line-height: 1.6;
      }

      .container {
        max-width: 450px;
        margin: 0 auto;
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 40px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        margin-top: 10vh;
      }

      .header {
        text-align: center;
        margin-bottom: 30px;
      }

      .header .icon {
        font-size: 48px;
        margin-bottom: 16px;
        display: block;
      }

      .header h1 {
        color: #2d3748;
        font-size: 28px;
        font-weight: 600;
        margin-bottom: 8px;
      }

      .header p {
        color: #718096;
        font-size: 14px;
        font-weight: 400;
      }

      .message {
        padding: 12px 16px;
        margin-bottom: 24px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 500;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .message.success {
        background: rgba(72, 187, 120, 0.1);
        color: #38a169;
        border: 1px solid rgba(72, 187, 120, 0.2);
      }

      .message.error {
        background: rgba(245, 101, 101, 0.1);
        color: #e53e3e;
        border: 1px solid rgba(245, 101, 101, 0.2);
      }

      .message.info {
        background: rgba(66, 153, 225, 0.1);
        color: #3182ce;
        border: 1px solid rgba(66, 153, 225, 0.2);
      }

      .message.warning {
        background: rgba(237, 137, 54, 0.1);
        color: #dd6b20;
        border: 1px solid rgba(237, 137, 54, 0.2);
      }

      .form-group {
        margin-bottom: 24px;
      }

      .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #2d3748;
        font-weight: 500;
        font-size: 14px;
      }

      .password-input-container {
        position: relative;
      }

      .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e2e8f0;
        border-radius: 10px;
        font-size: 16px;
        transition: all 0.3s ease;
        background: #ffffff;
        color: #2d3748;
        padding-right: 50px;
      }

      .form-control:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        transform: translateY(-1px);
      }

      .form-control::placeholder {
        color: #a0aec0;
      }

      .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        cursor: pointer;
        padding: 4px;
        color: #718096;
        font-size: 16px;
        transition: color 0.3s ease;
      }

      .password-toggle:hover {
        color: #667eea;
      }

      .password-strength {
        margin-top: 8px;
        font-size: 12px;
        display: none;
      }

      .strength-bar {
        height: 4px;
        background: #e2e8f0;
        border-radius: 2px;
        margin-top: 4px;
        overflow: hidden;
      }

      .strength-fill {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
      }

      .strength-weak .strength-fill {
        width: 25%;
        background: #e53e3e;
      }

      .strength-fair .strength-fill {
        width: 50%;
        background: #ed8936;
      }

      .strength-good .strength-fill {
        width: 75%;
        background: #38a169;
      }

      .strength-strong .strength-fill {
        width: 100%;
        background: #319795;
      }

      .password-requirements {
        margin-top: 12px;
        font-size: 12px;
        color: #718096;
        display: none;
      }

      .password-requirements.show {
        display: block;
      }

      .requirement {
        display: flex;
        align-items: center;
        gap: 6px;
        margin-bottom: 4px;
      }

      .requirement.met {
        color: #38a169;
      }

      .requirement.not-met {
        color: #e53e3e;
      }

      .requirement .icon {
        font-size: 10px;
      }

      .btn {
        width: 100%;
        padding: 14px 24px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        position: relative;
        overflow: hidden;
      }

      .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
      }

      .btn::before {
        content: "";
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(255, 255, 255, 0.2),
          transparent
        );
        transition: left 0.5s ease;
      }

      .btn:hover:not(:disabled)::before {
        left: 100%;
      }

      .btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(102, 126, 234, 0.3);
      }

      .btn:active {
        transform: translateY(0);
      }

      .form-actions {
        display: flex;
        gap: 12px;
        margin-top: 32px;
      }

      .btn-secondary {
        background: #e2e8f0;
        color: #4a5568;
      }

      .btn-secondary:hover {
        background: #cbd5e0;
        transform: translateY(-2px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      }

      .breadcrumb {
        display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 24px;
        font-size: 14px;
        color: #718096;
      }

      .breadcrumb a {
        color: #667eea;
        text-decoration: none;
        transition: color 0.3s ease;
      }

      .breadcrumb a:hover {
        color: #764ba2;
      }

      .breadcrumb-separator {
        color: #cbd5e0;
      }

      .security-tips {
        background: rgba(66, 153, 225, 0.05);
        border: 1px solid rgba(66, 153, 225, 0.1);
        border-radius: 8px;
        padding: 16px;
        margin-top: 24px;
        font-size: 13px;
        color: #4a5568;
      }

      .security-tips h4 {
        color: #2d3748;
        margin-bottom: 8px;
        font-size: 14px;
      }

      .security-tips ul {
        margin-left: 16px;
      }

      .security-tips li {
        margin-bottom: 4px;
      }

      .loading {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        z-index: 1000;
      }

      .loading.active {
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #e2e8f0;
        border-top: 4px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }

      .animation-fade-in {
        animation: fadeIn 0.5s ease-in-out;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .required {
        color: #e53e3e;
        margin-left: 2px;
      }

      @media (max-width: 640px) {
        .container {
          margin: 20px 10px;
          padding: 30px 20px;
          margin-top: 5vh;
        }

        .header h1 {
          font-size: 24px;
        }

        .form-actions {
          flex-direction: column;
        }
      }
    </style>
  </head>
  <body>
    <div class="loading" id="loading">
      <div class="spinner"></div>
    </div>

    <div class="container animation-fade-in">
      <nav class="breadcrumb">
        <a href="/portal/admin/dashboard">Dashboard</a>
        <span class="breadcrumb-separator">‚Ä∫</span>
        <a href="/portal/admin/dashboard/students">Students</a>
        <span class="breadcrumb-separator">‚Ä∫</span>
        <span>Change Password</span>
      </nav>

      <div class="header">
        <span class="icon">üîê</span>
        <h1>Change Password</h1>
        <p>Update student's login credentials securely</p>
      </div>

      <% if (msg && msg.trim() !== '') { %>
      <div
        class="message <%= msg.includes('success') || msg.includes('changed') || msg.includes('updated') ? 'success' : msg.includes('error') || msg.includes('failed') ? 'error' : msg.includes('warning') ? 'warning' : 'info' %>"
      >
        <span class="icon">
          <% if (msg.includes('success') || msg.includes('changed') ||
          msg.includes('updated')) { %> ‚úì <% } else if (msg.includes('error') ||
          msg.includes('failed')) { %> ‚úó <% } else if (msg.includes('warning'))
          { %> ‚ö† <% } else { %> ‚Ñπ <% } %>
        </span>
        <%= msg %>
      </div>
      <% } %>

      <form
        action="/portal/admin/dashboard/students/edit_password/<%= student._id %>"
        method="post"
        id="passwordForm"
      >
        <div class="form-group">
          <label for="password"
            >New Password <span class="required">*</span></label
          >
          <div class="password-input-container">
            <input
              type="password"
              name="password"
              id="password"
              class="form-control"
              placeholder="Enter new password"
              required
              minlength="8"
            />
            <button type="button" class="password-toggle" id="togglePassword">
              üëÅÔ∏è
            </button>
          </div>

          <div class="password-strength" id="passwordStrength">
            <div class="strength-bar">
              <div class="strength-fill"></div>
            </div>
            <span class="strength-text"
              >Password strength: <span id="strengthLevel">Weak</span></span
            >
          </div>

          <div class="password-requirements" id="passwordRequirements">
            <div class="requirement" id="lengthReq">
              <span class="icon">‚úó</span>
              <span>At least 8 characters</span>
            </div>
            <div class="requirement" id="uppercaseReq">
              <span class="icon">‚úó</span>
              <span>One uppercase letter</span>
            </div>
            <div class="requirement" id="lowercaseReq">
              <span class="icon">‚úó</span>
              <span>One lowercase letter</span>
            </div>
            <div class="requirement" id="numberReq">
              <span class="icon">‚úó</span>
              <span>One number</span>
            </div>
            <div class="requirement" id="specialReq">
              <span class="icon">‚úó</span>
              <span>One special character</span>
            </div>
          </div>
        </div>

        <div class="form-actions">
          <button
            type="button"
            class="btn btn-secondary"
            onclick="window.history.back()"
          >
            Cancel
          </button>
          <button type="submit" class="btn" id="submitBtn">
            Change Password
          </button>
        </div>
      </form>

      <div class="security-tips">
        <h4>üõ°Ô∏è Security Tips</h4>
        <ul>
          <li>Use a combination of letters, numbers, and symbols</li>
          <li>Avoid using personal information or common words</li>
          <li>Consider using a passphrase for better security</li>
          <li>The new password will be encrypted and stored securely</li>
        </ul>
      </div>
    </div>

    <script>
      const passwordInput = document.getElementById("password");
      const togglePassword = document.getElementById("togglePassword");
      const passwordStrength = document.getElementById("passwordStrength");
      const passwordRequirements = document.getElementById(
        "passwordRequirements"
      );
      const strengthLevel = document.getElementById("strengthLevel");
      const submitBtn = document.getElementById("submitBtn");
      const form = document.getElementById("passwordForm");

      // Toggle password visibility
      togglePassword.addEventListener("click", function () {
        const type =
          passwordInput.getAttribute("type") === "password"
            ? "text"
            : "password";
        passwordInput.setAttribute("type", type);
        this.textContent = type === "password" ? "üëÅÔ∏è" : "üôà";
      });

      // Password strength checker
      passwordInput.addEventListener("input", function () {
        const password = this.value;

        if (password.length > 0) {
          passwordStrength.style.display = "block";
          passwordRequirements.classList.add("show");
        } else {
          passwordStrength.style.display = "none";
          passwordRequirements.classList.remove("show");
          return;
        }

        // Check requirements
        const requirements = {
          length: password.length >= 8,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /\d/.test(password),
          special: /[!@#$%^&*(),.?":{}|<>]/.test(password),
        };

        // Update requirement indicators
        updateRequirement("lengthReq", requirements.length);
        updateRequirement("uppercaseReq", requirements.uppercase);
        updateRequirement("lowercaseReq", requirements.lowercase);
        updateRequirement("numberReq", requirements.number);
        updateRequirement("specialReq", requirements.special);

        // Calculate strength
        const score = Object.values(requirements).reduce(
          (acc, val) => acc + (val ? 1 : 0),
          0
        );
        updateStrengthBar(score);

        // Enable/disable submit button
        const isValid = score >= 4; // At least 4 out of 5 requirements
        submitBtn.disabled = !isValid;
      });

      function updateRequirement(id, met) {
        const element = document.getElementById(id);
        const icon = element.querySelector(".icon");

        if (met) {
          element.classList.add("met");
          element.classList.remove("not-met");
          icon.textContent = "‚úì";
        } else {
          element.classList.add("not-met");
          element.classList.remove("met");
          icon.textContent = "‚úó";
        }
      }

      function updateStrengthBar(score) {
        const strengthBar = document.querySelector(".strength-bar");
        const strengthFill = document.querySelector(".strength-fill");

        strengthBar.className = "strength-bar";

        if (score <= 2) {
          strengthBar.classList.add("strength-weak");
          strengthLevel.textContent = "Weak";
        } else if (score === 3) {
          strengthBar.classList.add("strength-fair");
          strengthLevel.textContent = "Fair";
        } else if (score === 4) {
          strengthBar.classList.add("strength-good");
          strengthLevel.textContent = "Good";
        } else {
          strengthBar.classList.add("strength-strong");
          strengthLevel.textContent = "Strong";
        }
      }

      // Form submission
      form.addEventListener("submit", function (e) {
        const password = passwordInput.value;

        if (password.length < 8) {
          e.preventDefault();
          alert("Password must be at least 8 characters long");
          return;
        }

        const loading = document.getElementById("loading");
        loading.classList.add("active");
      });

      // Auto-hide success messages
      const messages = document.querySelectorAll(".message.success");
      messages.forEach((msg) => {
        setTimeout(() => {
          msg.style.transition = "opacity 0.3s ease";
          msg.style.opacity = "0";
          setTimeout(() => msg.remove(), 300);
        }, 5000);
      });

      // Initially disable submit button
      submitBtn.disabled = true;
    </script>
  </body>
</html>
